// Code generated for package web by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/index.html
// templates/report.html
package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6f\x6f\xdb\xbc\x11\x7f\xef\x4f\x71\xd3\x83\x22\x49\x61\x59\x4e\xd0\x14\x81\x22\x79\x4b\xd3\x76\xed\x8b\xa2\xc5\x52\xa0\xd8\x86\x61\xa0\xc4\x93\x4d\x84\x22\x35\xf2\x14\x5b\x29\xfa\xdd\x07\x92\xb2\x2d\x39\x69\x96\x0e\x18\xb0\xc7\x79\x11\xf3\xf8\xbb\x7f\x3f\x1e\xef\xe8\xec\x0f\x6f\x3f\x5f\x7f\xfd\xeb\x97\x77\xb0\xa2\x5a\x2e\x26\x99\xfb\x07\x92\xa9\x65\x1e\xa1\x8a\x9c\x00\x19\x5f\x4c\x00\x00\xb2\x1a\x89\x41\xb9\x62\xc6\x22\xe5\x51\x4b\x55\x7c\x11\x41\x32\xdc\x54\xac\xc6\x3c\xba\x13\xb8\x6e\xb4\xa1\x08\x4a\xad\x08\x15\xe5\xd1\x5a\x70\x5a\xe5\x1c\xef\x44\x89\xb1\x5f\x4c\x41\x28\x41\x82\xc9\xd8\x96\x4c\x62\x7e\x1a\x39\x43\x99\xa5\x4e\x62\x30\x09\x50\x68\xde\xc1\xf7\x7e\xe1\x3e\x95\x56\x14\x57\xac\x16\xb2\x4b\xe1\xca\x08\x26\xa7\xf0\x01\xe5\x1d\x92\x28\xd9\x14\x2c\x53\x36\xb6\x68\x44\x75\xd9\x2b\xfd\x98\x4c\xfa\x6f\xc9\x4b\x78\xdf\x4a\x19\x9c\x83\x50\x4d\x4b\x50\x09\x94\xdc\xc2\xcb\xa4\xc7\x10\x6e\x88\x19\x64\x7f\xa7\xae\xc1\xdc\xad\xfe\x31\x72\xef\x75\x53\x38\x9d\xcf\x5f\x5c\x0e\xc4\x0d\xe3\x5c\xa8\x65\x0a\xa7\x67\xcd\x06\xce\xe6\xcd\x66\xb8\x5b\x33\xb3\x14\x2a\x85\x8b\x66\x03\xf3\xe1\x06\x17\xb6\x91\xac\x4b\x41\x28\x29\x14\xc6\x85\xd4\xe5\xed\x10\x50\x68\xc3\xd1\xa4\x70\xda\x6c\xc0\x6a\x29\x38\xfc\x56\x96\xe5\x18\xb1\x89\xad\xb8\xf7\xce\x03\x3a\x2e\xf4\x66\x90\xfc\x2e\xf7\x1b\x24\x60\xe0\xd9\x85\x4a\x1b\x60\x52\x42\xd1\x12\x69\x35\xc8\x3f\x08\x46\x29\x17\xac\xbc\x5d\x1a\xdd\x2a\x1e\x97\x5a\x6a\x93\xc2\x6f\xaf\xae\xaf\xde\x9f\x8f\x32\xe9\x77\xd6\x2b\x41\xf8\x38\x31\xaf\x7e\x85\x98\x6d\xde\x4a\xab\x91\xb9\xb2\x35\xd6\xf9\x69\xb4\x50\x84\xe6\xf2\xe9\x93\xd9\x65\x1f\xb2\x4a\x57\xfa\x0e\xcd\x28\x37\xdd\xb0\x52\x50\x97\xc2\x7c\x76\xf1\x18\x67\x5f\x57\x08\x9f\x34\x67\x12\x8e\xf7\x34\x9c\xec\xe9\x9a\xd5\x7e\xf3\xfb\x63\x67\xea\x63\x77\x46\x3e\x08\xce\x51\x41\xd1\x01\xc7\x8a\xb5\x92\xf6\xfa\x9e\x22\x6d\x05\x09\xad\x52\xa8\xc4\x06\xb9\x57\xb9\x21\xd6\x81\x50\xd0\x48\x56\xe2\x18\x7e\x1f\x0b\xc5\x71\x93\xc2\x69\x40\x0a\x02\xad\x80\x74\x33\x86\x49\xac\x28\x1d\x93\x4a\xba\x39\x90\x0c\x39\xdb\x5e\x8f\x20\x1c\x1b\x5b\xa1\x58\xae\xe8\x10\x18\xa4\x63\xa4\x63\xb8\x92\x7a\x9d\x02\x6b\x49\x7b\xec\x3b\xc5\x0a\x89\x60\x4b\xa3\xa5\x04\x51\x81\x42\xe4\xc8\xc7\x7a\x0f\x8b\xcc\x2c\x8b\xe3\xf9\x74\x3e\x9d\x9f\x04\x8f\x4c\x4a\x07\x0a\x95\xf6\x0c\x65\x16\xb4\xa7\xf3\xd9\xab\x60\xe1\x8d\x74\xea\xeb\x64\x7b\xe8\x07\xa7\x10\x0a\x35\xf6\x24\xbd\x1e\xd4\xe9\xb0\x1c\x42\x29\x5c\x87\x96\x96\xbc\xd1\x9b\xc3\x4a\x88\xfb\x76\xf7\x9f\x2e\x50\x85\xee\xef\xb1\xab\x70\xfe\xc2\x33\x07\xa7\xe7\x81\xe9\xf3\x17\x50\x19\x5d\x03\xad\xd0\x1d\xe0\xd4\x6d\xec\x25\x85\x26\xd2\x35\x30\xc5\xa1\x44\x77\x23\x1e\xf0\xfa\xb0\x81\x5c\x5c\x5c\x3c\x52\x03\xe7\xfd\xc9\x5e\xeb\x56\x72\x28\x10\x6a\x6d\x10\xb4\x01\x89\xd6\x4e\x81\x63\x83\xca\x11\xe4\x8a\xcd\x96\x06\x51\x81\x15\xf7\x83\xda\x1c\xf2\x74\xc5\x39\xfc\x4d\xeb\x1a\xae\x94\xa8\x99\x2b\xee\x01\x51\xcc\xcb\x70\x44\x51\xbc\xc6\xe2\x56\x50\xcc\xb6\xf8\x14\x7a\xd8\xbd\x33\x33\x9f\xbd\xb6\xc3\x98\x9f\x80\x1d\x46\xf3\xa7\xad\xe9\x5b\xec\x2a\xc3\x6a\xb4\x23\x95\xd1\x68\x71\xac\x7e\xdf\xe2\xc9\x30\x65\x2b\x6d\xea\x14\xfc\x78\x3a\x9e\x9f\xfc\x18\x5d\xa6\x27\xa0\xa7\x3b\xe8\x3e\x8e\xe7\xfa\x7f\x86\xdf\x27\xfd\x01\x64\x49\x3f\x42\xc3\x58\x26\x41\x12\x17\x1f\x5d\xd3\x80\x86\x2d\x31\x4b\x82\x64\x92\x25\x61\xb2\x67\x6e\xc8\x2e\x26\x19\x17\x77\x00\x4c\x8a\xa5\xca\xa3\x50\x4d\x7e\xfa\x9f\x2d\xde\x32\x21\x3b\xf8\x84\x48\x42\x2d\xb3\x64\x75\xe6\x74\xc2\xa0\xd0\xaa\x94\xa2\xbc\xcd\x23\xae\xcb\xb6\x46\x45\xb3\x25\xd2\x3b\x89\xee\xeb\x9b\xee\x23\x3f\x3e\x12\xfc\x9f\x06\xdd\x5b\xe0\xe8\x64\xe6\xe3\x9a\xf5\x1d\x32\x3f\xf2\xe3\xee\x28\xda\x65\xe7\xb7\xfb\x97\x42\xea\x7b\x4d\xd4\xfb\xbe\x29\x4d\x5b\xbb\xae\x48\xad\xcd\x92\xe0\xdb\x25\xc0\xc5\x5d\x1f\xb8\xe0\x79\xb4\x73\x15\x41\x29\x99\xb5\x79\xe4\x2f\x65\xd4\xbf\x4f\x1c\x6c\x28\xdf\x5d\xd6\xfe\x40\xa2\xc5\x2e\x92\x21\xd6\xe8\xf5\x60\xe7\x70\xb7\xd4\x32\xae\x79\xfc\xfa\x00\xe2\x61\xee\x88\x80\x95\xae\x50\xf3\x28\xd9\x86\x56\x23\xad\x34\xcf\xa3\x2f\x9f\x6f\xbe\x46\x0f\x94\xc2\x47\x2b\xdb\x16\xb5\xa0\x3c\x32\x48\xad\x51\xee\x19\x55\x09\x53\x1f\x1f\xbd\xd5\xd0\xe9\x16\x0c\x32\x29\x3b\x58\x33\x45\xae\x24\x4a\x83\xee\x4a\x31\x08\x4e\x60\x2d\x68\xe5\x1a\x84\x45\xe0\x48\x4c\x48\xfb\xc7\xa3\x93\xcb\x47\x62\x3c\x4c\xc7\x85\x1c\xbb\x66\xd5\xfc\x04\xec\x15\x24\x2b\x50\xba\x47\x84\xe7\xbc\x43\x4b\x68\x38\xeb\x22\x58\x7c\x5b\x31\x02\x2e\x38\xec\x84\x29\x64\x89\xc7\x3f\x61\x6f\xfb\xea\xda\x9e\xe2\xc0\xa2\x7f\x87\x45\x0e\x10\x8d\x62\x74\x67\x67\xb4\x8c\xfa\x07\xe7\x5e\xe3\xa7\x5e\xf6\x1f\x83\xff\x6a\x85\x41\xbe\xc8\x92\xad\xe7\x9f\x30\x13\x0a\xec\x7f\x41\x1a\x69\x17\x6c\xe0\xab\x91\xcc\x4d\x70\xe0\x1a\xbc\x38\xfd\x75\xc6\x82\xb9\xe7\xb2\x15\xd0\xbf\x13\xa6\x44\xdd\x20\x17\xae\xa1\xd8\x68\xf1\x71\xbf\xf8\x2f\x58\x1a\x9a\x7a\x2e\x57\x43\x9d\xff\x5b\xc6\xfa\x6e\xdc\xeb\x14\xa4\xa0\x20\x15\x73\xa6\x96\x68\xb6\x99\x86\x8e\x12\x8d\xbb\xac\x7f\xa5\x45\x8b\xeb\xd0\x3f\xfe\xe2\xbb\xc7\xbe\xc1\xfe\x42\xdc\x59\xe2\x22\x3d\xe8\x93\x63\xe8\x60\xb9\xed\xdc\xfd\x3f\x5b\x1a\xd1\x50\xd8\x4a\x12\xf8\x33\x92\x7f\xdd\xf8\x2e\xed\x85\x12\x29\xac\x20\x87\xe7\x4c\x9a\xcb\xc9\xd6\xd6\xb7\x15\x2a\x6f\xac\xb5\x68\xc0\x0f\x2b\x37\x81\xbb\xf5\x0a\xdd\xfb\xa6\x25\x2b\x38\x82\xae\xf6\x0e\xa7\x50\x4a\x6d\x11\x04\x79\x1b\x6b\xa1\xb8\x5e\xcf\xfa\x41\x07\x39\x54\xad\xf2\x2d\xfd\x18\xef\x50\xd1\xc9\x60\x84\x8b\x0a\x82\x70\x46\xcc\x2c\x91\x20\xcf\xf3\x60\xf3\x64\x34\xe8\x21\x08\xc7\xe3\x10\x72\x88\xdc\x4f\x86\x68\xff\xd0\x09\x43\xfd\xc7\x24\x4b\xb6\x04\x65\x49\x3f\xab\x93\xf0\x63\xfd\xdf\x01\x00\x00\xff\xff\xd2\x85\x47\x2d\xbd\x0f\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 4029, mode: os.FileMode(493), modTime: time.Unix(1559818276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesReportHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xdd\xae\xdb\x44\x10\xbe\xcf\x53\x0c\xdb\x22\xc1\xd1\x71\x9d\x54\x45\x3a\xf2\xb1\x23\xaa\x42\x05\x37\x80\xa0\x37\x15\xe2\x62\xec\x1d\x27\xa3\xac\x77\xad\xdd\xc9\x8f\x1b\x45\xe2\x59\x78\x34\x9e\x04\xf9\x27\x8d\x9d\xd2\x50\x9a\x9b\xc4\x33\xdf\xcc\x37\xf3\x8d\x67\x92\x7e\xf1\xdd\xcf\xaf\xde\xbc\xfd\xe5\x7b\x58\x4b\x65\x96\xb3\xb4\xfd\x02\x83\x76\x95\x29\xb2\xaa\x35\x10\xea\xe5\x0c\x00\x20\xad\x48\x10\x8a\x35\xfa\x40\x92\xa9\xad\x94\xd1\x83\x82\x78\xe2\x74\x56\xc8\x4a\xa6\xf6\xac\x65\x9d\x69\xda\x71\x41\x51\xf7\x70\x0f\x6c\x59\x18\x4d\x14\x0a\x34\x94\x2d\x14\x58\xac\x28\x53\x3b\xa6\x7d\xed\xbc\xa8\x3e\x53\x1a\xa4\x31\xd4\x27\x05\x80\xdc\xe9\x06\x8e\xe7\xa7\xf6\x53\x3a\x2b\x51\x89\x15\x9b\x26\x81\x97\x9e\xd1\xdc\xc3\x0f\x64\x76\x24\x5c\xe0\x3d\x04\xb4\x21\x0a\xe4\xb9\x7c\x3c\x47\x9d\x66\xb3\xf3\xcf\xf8\x0e\x5e\x6f\x8d\xe9\x4b\x02\xb6\xf5\x56\xa0\x64\x32\x3a\xc0\x5d\x7c\x06\x09\x1d\x04\x3d\xe1\xef\xd2\xd4\x94\xb5\x4f\x7f\x4c\x4b\xe8\xa2\x13\x58\xcc\xe7\x5f\x3e\x8e\xed\x35\x6a\xcd\x76\x95\xc0\xe2\x79\x7d\x80\xe7\xf3\xfa\x30\x71\x57\xe8\x57\x6c\x13\x78\xa8\x0f\x30\x9f\x78\x34\x87\xda\x60\x93\x00\x5b\xc3\x96\xa2\xdc\xb8\x62\x33\x41\xe4\xce\x6b\xf2\x09\x2c\xea\x03\x04\x67\x58\xc3\x93\xa2\x28\xae\x20\x87\x28\xf0\xbb\xae\x80\x1e\x1e\xe5\xee\x30\x56\xe1\x22\xc2\x6f\x24\x80\xd0\x49\x0d\xa5\xf3\x80\xc6\x40\xbe\x15\x71\x76\x2c\x44\x6f\x99\xf6\x9e\x63\xb1\x59\x79\xb7\xb5\x3a\x2a\x9c\x71\x3e\x81\x27\x2f\x5e\xbd\x7c\xfd\xcd\xb4\xa1\xc1\xb5\x5f\xb3\xd0\x47\x24\x7a\xf1\xff\x24\x3a\x0b\x60\x9d\x9d\x66\x2c\xb6\x3e\xb4\x5c\xb5\x63\x2b\xe4\x1f\xff\x6b\x50\x17\x1d\xfa\xf6\x92\xb5\xdb\x91\x9f\x36\xe9\x6a\x2c\x58\x9a\x04\xe6\xcf\x1e\xfe\x25\xf0\xdb\x68\x4f\xf9\x86\x25\xda\x50\x53\x7a\xac\x28\x00\x5a\xae\x50\xe8\x9d\x73\xd5\xd5\xeb\xea\x5b\xcb\x39\x40\x3c\xda\x50\x3a\x5f\x25\xd0\xad\xc1\x57\xf3\xaf\x4f\x63\xb4\xb8\x1b\xd8\xc5\x05\x3b\xaa\xe5\x93\x6b\xf8\x14\xee\xdb\x9c\xed\x7a\xc6\xa3\xfd\x4c\x85\xc5\xd0\xf2\x57\x6a\xf7\x17\x6a\x5c\x51\x1a\xf7\xa6\x59\x1a\xf7\x87\x63\x96\xb6\x1b\xbc\x9c\xa5\x9a\x77\xed\x74\x37\xda\xed\x6d\xa6\x16\x6a\xc8\x80\x5e\xb8\x30\x04\xac\x33\xe5\xbb\x3c\xea\xfd\xee\x43\x5a\x2f\xef\xde\x52\x10\xf2\x1a\x9b\xbb\x34\xf7\x17\xd7\xf1\xe8\xd1\xae\x08\x9e\x22\x24\x19\x3c\x7b\x8f\x3a\x4d\x5a\x82\xbf\xff\xfc\x0b\x8e\xc7\xa7\x78\x3a\x5d\x45\x93\xd5\xa7\xd1\x5d\xe8\xa8\xde\xb8\x0f\x68\x3e\x64\xea\x40\x57\x2c\x37\x98\x3e\xce\xf6\x63\x55\x93\xe6\x8a\xac\x84\x9b\xad\x8d\x70\x9f\xd3\x5c\x1a\x0f\x12\xb7\x33\xd1\xbc\xeb\x47\x31\xa8\xdf\x4e\x1a\xb0\x10\x76\x36\x53\xf1\x58\xf9\x61\xf5\x0b\x83\x21\x64\x2a\x17\x0b\xb9\xd8\x48\xb7\x85\x79\x05\xdd\x61\x54\x61\x9b\x57\x2c\xaa\x3f\x23\xc3\xcd\x4f\xba\x5d\x53\x53\x01\x7e\xa2\x3d\xf4\xc3\x4d\xe3\x3e\xf1\xc0\x1f\xb7\x05\x5c\x0a\x8b\x87\x77\x25\xee\xfe\x8c\xfe\x09\x00\x00\xff\xff\xdf\x50\xea\x0b\x9c\x06\x00\x00")

func templatesReportHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesReportHtml,
		"templates/report.html",
	)
}

func templatesReportHtml() (*asset, error) {
	bytes, err := templatesReportHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/report.html", size: 1692, mode: os.FileMode(420), modTime: time.Unix(1565734630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html":  templatesIndexHtml,
	"templates/report.html": templatesReportHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html":  &bintree{templatesIndexHtml, map[string]*bintree{}},
		"report.html": &bintree{templatesReportHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
